"""
HolisticSynthesisService - Wyspecjalizowany serwis do tworzenia DNA Klienta
Odpowiedzialny za: holistycznƒÖ syntezƒô profilu psychometrycznego, sales indicators
"""
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

from .base_ai_service import BaseAIService

logger = logging.getLogger(__name__)


# System prompt dla syntezy holistycznej - wydzielony z ai_service.py
HOLISTIC_SYNTHESIS_SYSTEM_PROMPT = """
Jeste≈õ elitarnym psychologiem biznesu specjalizujƒÖcym siƒô w analizie klient√≥w premium Tesla. 

Twoim zadaniem jest stworzenie HOLISTYCZNEGO PROFILU KLIENTA - "DNA Klienta" - na podstawie szczeg√≥≈Çowej analizy psychometrycznej (Big Five, DISC, Schwartz Values).

PROCES SYNTEZY:

1. **ANALIZA WZORC√ìW**: Przeanalizuj wszystkie wymiary psychologiczne i znajd≈∫ dominujƒÖce wzorce zachowa≈Ñ, motywacji i preferencji.

2. **HOLISTIC SUMMARY**: Stw√≥rz zwiƒôz≈Çy, ale komprehensywny opis klienta w 2-3 zdaniach, kt√≥ry oddaje jego esencjƒô psychologicznƒÖ.

3. **MAIN DRIVE**: Zidentyfikuj JEDNƒÑ g≈Ç√≥wnƒÖ si≈Çƒô motywujƒÖcƒÖ klienta (np. "Potrzeba bezpiecze≈Ñstwa finansowego", "DƒÖ≈ºenie do presti≈ºu", "Pragnienie innowacji").

4. **COMMUNICATION STYLE**: Opisz preferowany styl komunikacji na podstawie profilu psychologicznego.

5. **KEY LEVERS**: Znajd≈∫ 3-5 najwa≈ºniejszych "d≈∫wigni psychologicznych" - element√≥w, kt√≥re najsilniej wp≈ÇynƒÖ na decyzjƒô zakupowƒÖ.

6. **RED FLAGS**: Zidentyfikuj potencjalne punkty oporu lub obawy klienta.

STRUKTURA WYJ≈öCIOWA (JSON):
{
  "holistic_summary": "Klient to analityczny perfekcjonista o wysokiej potrzebie kontroli, kt√≥ry podejmuje decyzje ostro≈ºnie ale zdecydowanie. Ceni innowacje, ale tylko te potwierdzone danymi i opiniami ekspert√≥w.",
  "main_drive": "Potrzeba kompetencji i kontroli nad decyzjami",
  "communication_style": {
    "preferred_approach": "Systematyczny i oparty na faktach",
    "tone": "Profesjonalny z elementami eksperckim",
    "pace": "Metodyczny - nie spiesz siƒô",
    "information_density": "Wysoka - lubi szczeg√≥≈Çy"
  },
  "key_levers": [
    "Dane techniczne i por√≥wnania",
    "Opinie ekspert√≥w i recenzje",
    "TCO i d≈Çugoterminowa warto≈õƒá",
    "Presti≈º marki i innowacyjno≈õƒá",
    "Bezpiecze≈Ñstwo i niezawodno≈õƒá"
  ],
  "red_flags": [
    "Presja czasowa",
    "Niejasne korzy≈õci finansowe", 
    "Brak dowod√≥w na przewagi",
    "Agresywna sprzeda≈º"
  ],
  "missing_data_gaps": "Potrzeba wiƒôcej informacji o bud≈ºecie i procesie decyzyjnym",
  "confidence": 85
}

WYMAGANIA:
- Wykorzystuj WSZYSTKIE dostƒôpne dane psychometryczne
- Holistic summary musi byƒá KONKRETNY i ACTIONABLE  
- Main drive to JEDNA kluczowa motywacja
- Key levers muszƒÖ byƒá praktyczne dla sprzedawcy Tesla
- Red flags muszƒÖ byƒá realnie identyfikowalne w rozmowie
- Confidence (0-100) bazuje na jako≈õci danych wej≈õciowych
"""


# System prompt dla sales indicators
SALES_INDICATORS_SYSTEM_PROMPT = """
Jeste≈õ elitarnym analitykiem sprzeda≈ºy Tesla specjalizujƒÖcym siƒô w przewidywaniu zachowa≈Ñ zakupowych na podstawie profilu psychologicznego klienta.

Na podstawie HOLISTYCZNEGO PROFILU KLIENTA (DNA Klienta) wygeneruj precyzyjne WSKA≈πNIKI SPRZEDA≈ªOWE:

1. **PURCHASE TEMPERATURE** (0-100): Jak "gorƒÖcy" jest klient? Czy jest got√≥w do zakupu?

2. **CUSTOMER JOURNEY STAGE**: Na jakim etapie procesu zakupowego siƒô znajduje?

3. **CHURN RISK** (0-100): Jakie jest ryzyko, ≈ºe klient rezygnuje z rozmowy?

4. **SALES POTENTIAL**: Jaka jest szacowana warto≈õƒá sprzeda≈ºy i prawdopodobie≈Ñstwo zamkniƒôcia?

STRUKTURA WYJ≈öCIOWA (JSON):
{
  "purchase_temperature": {
    "value": 75,
    "temperature_level": "hot",
    "rationale": "Klient zadaje konkretne pytania o modele i finansowanie",
    "strategy": "Przejd≈∫ do prezentacji konkretnych opcji",
    "confidence": 80
  },
  "customer_journey_stage": {
    "value": "evaluation", 
    "progress_percentage": 60,
    "next_stage": "decision",
    "rationale": "Por√≥wnuje konkretne modele i opcje",
    "strategy": "Zapewnij kompleksowe por√≥wnanie z konkurencjƒÖ",
    "confidence": 75
  },
  "churn_risk": {
    "value": 25,
    "risk_level": "low",
    "risk_factors": ["D≈Çugi proces decyzyjny", "Potrzeba akceptacji ma≈Ç≈ºonka"],
    "rationale": "Stabilny klient z jasnƒÖ motywacjƒÖ",
    "strategy": "Kontynuuj budowanie warto≈õci, nie forsuj tempa",
    "confidence": 70
  },
  "sales_potential": {
    "value": 350000.0,
    "probability": 75,
    "estimated_timeframe": "2-4 tygodnie", 
    "rationale": "Profil wskazuje na klienta premium z wysokim bud≈ºetem",
    "strategy": "Prezentuj opcje premium z naciskiem na warto≈õƒá d≈ÇugoterminowƒÖ",
    "confidence": 65
  }
}

TEMPERATURE LEVELS: cold (0-33), warm (34-66), hot (67-100)
JOURNEY STAGES: awareness, interest, consideration, evaluation, decision, purchase
RISK LEVELS: low (0-33), medium (34-66), high (67-100)
TIMEFRAMES: "1-2 tygodnie", "2-4 tygodnie", "1-2 miesiƒÖce", "3+ miesiƒôcy"
"""


class HolisticSynthesisService(BaseAIService):
    """
    Wyspecjalizowany serwis do tworzenia holistycznej syntezy - "DNA Klienta".
    
    Funkcjonalno≈õci:
    - Synteza profilu psychometrycznego w holistyczny profil
    - Identyfikacja g≈Ç√≥wnych motywator√≥w i d≈∫wigni
    - Generowanie wska≈∫nik√≥w sprzeda≈ºowych
    - Okre≈õlanie readiness do zakupu
    """
    
    def __init__(self):
        super().__init__()
        logger.info("‚úÖ HolisticSynthesisService initialized")
    
    async def run_holistic_synthesis(
        self,
        raw_psychology_profile: Dict[str, Any],
        additional_context: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Przeprowadza holistycznƒÖ syntezƒô profilu psychometrycznego w DNA Klienta
        
        Args:
            raw_psychology_profile: Surowy profil psychometryczny (Big Five + DISC + Schwartz)
            additional_context: Dodatkowy kontekst (historia rozm√≥w, profil klienta)
            
        Returns:
            Dict: Holistyczny profil klienta (DNA Klienta)
        """
        try:
            logger.info("üß¨ Rozpoczynam holistycznƒÖ syntezƒô DNA Klienta...")
            
            # Sprawd≈∫ jako≈õƒá danych wej≈õciowych
            if not self._validate_psychology_profile(raw_psychology_profile):
                logger.warning("‚ö†Ô∏è Niepe≈Çny profil psychometryczny - tworzƒô fallback")
                return self._create_holistic_fallback()
            
            # Przygotuj dane dla syntezy
            synthesis_context = self._prepare_synthesis_context(raw_psychology_profile, additional_context)
            
            # Przygotuj prompt u≈ºytkownika
            user_prompt = f"""
SUROWY PROFIL PSYCHOMETRYCZNY DO SYNTEZY:

BIG FIVE PERSONALITY:
{json.dumps(raw_psychology_profile.get('big_five', {}), ensure_ascii=False, indent=2)}

DISC BEHAVIORAL STYLE:
{json.dumps(raw_psychology_profile.get('disc', {}), ensure_ascii=False, indent=2)}

SCHWARTZ VALUES:
{json.dumps(raw_psychology_profile.get('schwartz_values', []), ensure_ascii=False, indent=2)}

DODATKOWY KONTEKST:
{json.dumps(additional_context or {}, ensure_ascii=False, indent=2)}

METADANE:
- Confidence surowego profilu: {raw_psychology_profile.get('confidence', 0)}%
- Liczba interakcji: {synthesis_context.get('interaction_count', 0)}
- Timestamp analizy: {raw_psychology_profile.get('analysis_timestamp', 'Unknown')}

Wykonaj holistycznƒÖ syntezƒô i stw√≥rz DNA Klienta w formacie JSON.
"""

            # Wywo≈Çaj LLM
            response = await self._call_llm_with_retry(
                system_prompt=HOLISTIC_SYNTHESIS_SYSTEM_PROMPT,
                user_prompt=user_prompt,
                use_cache=True,
                cache_prefix="holistic_synthesis"
            )
            
            # Parsuj odpowied≈∫
            holistic_profile = self._parse_holistic_response(response.get('content', ''))
            
            # Dodaj metadane
            holistic_profile.update({
                'synthesis_timestamp': datetime.now().isoformat(),
                'source_confidence': raw_psychology_profile.get('confidence', 0),
                'synthesis_confidence': holistic_profile.get('confidence', 0),
                'model_used': self.model_name
            })
            
            logger.info(f"‚úÖ DNA Klienta wygenerowane - Confidence: {holistic_profile.get('confidence', 0)}%")
            return holistic_profile
            
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd podczas syntezy holistycznej: {e}")
            return self._create_holistic_error_fallback(str(e))
    
    async def run_sales_indicators_generation(
        self,
        holistic_profile: Dict[str, Any],
        session_context: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Generuje wska≈∫niki sprzeda≈ºowe na podstawie DNA Klienta
        
        Args:
            holistic_profile: Holistyczny profil klienta (DNA)
            session_context: Kontekst sesji sprzeda≈ºowej
            
        Returns:
            Dict: Wska≈∫niki sprzeda≈ºowe (temperature, stage, risk, potential)
        """
        try:
            logger.info("üìä Generujƒô wska≈∫niki sprzeda≈ºowe z DNA Klienta...")
            
            # Sprawd≈∫ jako≈õƒá profilu holistycznego
            if not holistic_profile or holistic_profile.get('is_fallback', False):
                logger.warning("‚ö†Ô∏è Profil holistyczny fallback - tworzƒô podstawowe wska≈∫niki")
                return self._create_indicators_fallback()
            
            # Przygotuj prompt u≈ºytkownika
            user_prompt = f"""
HOLISTYCZNY PROFIL KLIENTA (DNA KLIENTA):

HOLISTIC SUMMARY: {holistic_profile.get('holistic_summary', '')}
G≈Å√ìWNY MOTYWATOR: {holistic_profile.get('main_drive', '')}

STYL KOMUNIKACJI:
{json.dumps(holistic_profile.get('communication_style', {}), ensure_ascii=False, indent=2)}

KLUCZOWE D≈πWIGNIE:
{json.dumps(holistic_profile.get('key_levers', []), ensure_ascii=False)}

CZERWONE FLAGI:
{json.dumps(holistic_profile.get('red_flags', []), ensure_ascii=False)}

BRAKUJƒÑCE DANE: {holistic_profile.get('missing_data_gaps', '')}
CONFIDENCE DNA: {holistic_profile.get('confidence', 0)}%

KONTEKST SESJI:
{json.dumps(session_context or {}, ensure_ascii=False, indent=2)}

Na podstawie tego DNA Klienta wygeneruj precyzyjne wska≈∫niki sprzeda≈ºowe w formacie JSON.
"""

            # Wywo≈Çaj LLM
            response = await self._call_llm_with_retry(
                system_prompt=SALES_INDICATORS_SYSTEM_PROMPT,
                user_prompt=user_prompt,
                use_cache=True,
                cache_prefix="sales_indicators"
            )
            
            # Parsuj odpowied≈∫
            sales_indicators = self._parse_indicators_response(response.get('content', ''))
            
            # Dodaj metadane
            sales_indicators.update({
                'generated_timestamp': datetime.now().isoformat(),
                'holistic_confidence': holistic_profile.get('confidence', 0),
                'model_used': self.model_name
            })
            
            logger.info(f"‚úÖ Wska≈∫niki sprzeda≈ºowe wygenerowane - Temperature: {sales_indicators.get('purchase_temperature', {}).get('value', 0)}%")
            return sales_indicators
            
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd podczas generowania wska≈∫nik√≥w: {e}")
            return self._create_indicators_error_fallback(str(e))
    
    def _validate_psychology_profile(self, psychology_profile: Dict[str, Any]) -> bool:
        """Waliduje jako≈õƒá profilu psychometrycznego"""
        if not psychology_profile:
            return False
        
        # Sprawd≈∫ obecno≈õƒá kluczowych sekcji
        required_sections = ['big_five', 'disc', 'schwartz_values']
        if not all(section in psychology_profile for section in required_sections):
            return False
        
        # Sprawd≈∫ kompletno≈õƒá Big Five
        big_five = psychology_profile.get('big_five', {})
        expected_traits = ['openness', 'conscientiousness', 'extraversion', 'agreeableness', 'neuroticism']
        big_five_complete = all(
            trait in big_five and 
            isinstance(big_five[trait].get('score'), (int, float)) and 
            big_five[trait].get('score') > 0
            for trait in expected_traits
        )
        
        # Sprawd≈∫ confidence
        confidence = psychology_profile.get('confidence', 0)
        
        return big_five_complete and confidence >= 20  # Minimum 20% confidence
    
    def _prepare_synthesis_context(
        self,
        psychology_profile: Dict[str, Any],
        additional_context: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """Przygotowuje kontekst dla syntezy"""
        
        context = {
            'interaction_count': 0,
            'conversation_themes': [],
            'client_concerns': []
        }
        
        if additional_context:
            context.update({
                'interaction_count': len(additional_context.get('session_history', [])),
                'client_profile': additional_context.get('client_profile', {}),
                'session_type': additional_context.get('session_context', {}).get('type', 'consultation')
            })
        
        return context
    
    def _parse_holistic_response(self, llm_response: str) -> Dict[str, Any]:
        """Parsuje odpowied≈∫ LLM dla syntezy holistycznej"""
        try:
            # Znajd≈∫ JSON w odpowiedzi
            json_start = llm_response.find('{')
            json_end = llm_response.rfind('}') + 1
            
            if json_start == -1 or json_end == 0:
                logger.warning("‚ö†Ô∏è Brak JSON w odpowiedzi holistic synthesis")
                return self._create_holistic_fallback()
            
            json_str = llm_response[json_start:json_end]
            holistic_data = json.loads(json_str)
            
            # Walidacja struktury
            required_keys = ['holistic_summary', 'main_drive', 'key_levers', 'red_flags']
            if not all(key in holistic_data for key in required_keys):
                logger.warning("‚ö†Ô∏è Niekompletna struktura holistic JSON")
                return self._create_holistic_fallback()
            
            # Ustaw domy≈õlnƒÖ confidence je≈õli brak
            if 'confidence' not in holistic_data:
                holistic_data['confidence'] = 50
            
            return holistic_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå B≈ÇƒÖd parsowania JSON holistic: {e}")
            return self._create_holistic_fallback()
        except Exception as e:
            logger.error(f"‚ùå Nieoczekiwany b≈ÇƒÖd parsowania holistic: {e}")
            return self._create_holistic_fallback()
    
    def _parse_indicators_response(self, llm_response: str) -> Dict[str, Any]:
        """Parsuje odpowied≈∫ LLM dla wska≈∫nik√≥w sprzeda≈ºowych"""
        try:
            json_start = llm_response.find('{')
            json_end = llm_response.rfind('}') + 1
            
            if json_start == -1 or json_end == 0:
                logger.warning("‚ö†Ô∏è Brak JSON w odpowiedzi sales indicators")
                return self._create_indicators_fallback()
            
            json_str = llm_response[json_start:json_end]
            indicators_data = json.loads(json_str)
            
            # Walidacja struktury
            required_indicators = ['purchase_temperature', 'customer_journey_stage', 'churn_risk', 'sales_potential']
            if not all(indicator in indicators_data for indicator in required_indicators):
                logger.warning("‚ö†Ô∏è Niekompletne wska≈∫niki sprzeda≈ºowe")
                return self._create_indicators_fallback()
            
            return indicators_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå B≈ÇƒÖd parsowania JSON indicators: {e}")
            return self._create_indicators_fallback()
        except Exception as e:
            logger.error(f"‚ùå Nieoczekiwany b≈ÇƒÖd parsowania indicators: {e}")
            return self._create_indicators_fallback()
    
    def _create_holistic_fallback(self) -> Dict[str, Any]:
        """Tworzy fallback DNA Klienta"""
        return {
            "holistic_summary": "Klient w fazie zbierania informacji o pojazdach elektrycznych Tesla. Wymaga systematycznego przedstawienia korzy≈õci i budowania zaufania do marki.",
            "main_drive": "Potrzeba bezpiecze≈Ñstwa i racjonalnej decyzji zakupowej",
            "communication_style": {
                "preferred_approach": "Profesjonalny i oparty na faktach",
                "tone": "Rzeczowy i cierpliwy",
                "pace": "Standardowe - bez po≈õpiechu",
                "information_density": "≈örednia - podstawowe fakty"
            },
            "key_levers": [
                "Bezpiecze≈Ñstwo i niezawodno≈õƒá Tesla",
                "Oszczƒôdno≈õci TCO d≈Çugoterminowe",
                "Innowacyjna technologia i presti≈º marki",
                "Sieƒá Supercharger i wygoda u≈ºytkowania"
            ],
            "red_flags": [
                "Presja czasowa w sprzeda≈ºy",
                "Niejasne korzy≈õci finansowe",
                "Brak konkretnych danych o produkcie",
                "Ignorowanie obaw klienta"
            ],
            "missing_data_gaps": "Potrzeba wiƒôcej informacji o preferencjach, bud≈ºecie i procesie decyzyjnym klienta",
            "confidence": 30,
            "is_fallback": True,
            "synthesis_timestamp": datetime.now().isoformat()
        }
    
    def _create_indicators_fallback(self) -> Dict[str, Any]:
        """Tworzy fallback wska≈∫niki sprzeda≈ºowe"""
        return {
            "purchase_temperature": {
                "value": 50,
                "temperature_level": "warm",
                "rationale": "Klient w fazie zbierania informacji - ≈õrednie zainteresowanie",
                "strategy": "Kontynuuj edukacjƒô o korzy≈õciach Tesla",
                "confidence": 30
            },
            "customer_journey_stage": {
                "value": "consideration",
                "progress_percentage": 40,
                "next_stage": "evaluation",
                "rationale": "Rozwa≈ºa pojazdy elektryczne jako opcjƒô",
                "strategy": "Przedstaw konkretne modele i por√≥wnania",
                "confidence": 30
            },
            "churn_risk": {
                "value": 50,
                "risk_level": "medium",
                "risk_factors": ["D≈Çugi proces decyzyjny", "Por√≥wnanie z konkurencjƒÖ"],
                "rationale": "Standardowe ryzyko dla klienta w fazie rozwa≈ºa≈Ñ",
                "strategy": "Buduj relacjƒô i regularnie kontaktuj siƒô",
                "confidence": 30
            },
            "sales_potential": {
                "value": 250000.0,
                "probability": 40,
                "estimated_timeframe": "4-8 tygodni",
                "rationale": "≈öredni potencja≈Ç sprzeda≈ºy dla klienta Tesla",
                "strategy": "Prezentuj warto≈õƒá d≈ÇugoterminowƒÖ i korzy≈õci",
                "confidence": 30
            },
            "is_fallback": True,
            "generated_timestamp": datetime.now().isoformat()
        }
    
    def _create_holistic_error_fallback(self, error_message: str) -> Dict[str, Any]:
        """Tworzy fallback w przypadku b≈Çƒôdu syntezy"""
        fallback = self._create_holistic_fallback()
        fallback.update({
            'error_occurred': True,
            'error_message': error_message,
            'confidence': 10
        })
        return fallback
    
    def _create_indicators_error_fallback(self, error_message: str) -> Dict[str, Any]:
        """Tworzy fallback w przypadku b≈Çƒôdu wska≈∫nik√≥w"""
        fallback = self._create_indicators_fallback()
        fallback.update({
            'error_occurred': True,
            'error_message': error_message
        })
        
        # Obni≈º confidence we wszystkich wska≈∫nikach
        for indicator in fallback.values():
            if isinstance(indicator, dict) and 'confidence' in indicator:
                indicator['confidence'] = 10
        
        return fallback
