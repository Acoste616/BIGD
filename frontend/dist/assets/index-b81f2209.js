import{A as h,c as y,aj as A,ai as w,ah as f,a as D,b as C,V as b,W as v,a9 as K,e as _,a4 as E,E as T,R,n as O,Z as P,f as k,G as j,S as B,q as F,p as N,ak as M,k as L,af as W,a5 as J,K as Q,_ as $,a3 as x,x as z,ag as G,j as H,M as U,a2 as Y,Y as q,B as V,z as X,d as Z,w as ee,l as ae,h as te,g as se,i as ne,I as oe,ab as ie,ac as le,a7 as re,D as ce,H as ge,Q as de,P as ue,U as Se,a1 as pe,X as me,J as Ie,t as he,m as ye,C as Ae,r as we,aa as fe,a6 as De,s as Ce,T as be,N as ve,a8 as Ke,O as _e,u as Ee,F as Te,o as Re,v as Oe,ad as Pe,L as ke,$ as je,a0 as Be,y as Fe,ae as Ne}from"./index-31964f0b.js";const l={data:[],loading:!1,error:null,pagination:{total:0,page:1,size:10,pages:0}},r={data:null,loading:!1,error:null},i=(e,a,t=null)=>{const s=e.message||"Wystąpił nieoczekiwany błąd";a(s),t&&t({type:"error",message:s,duration:5e3}),console.error("API Error handled:",e)},c=(e,a=5e3)=>{setTimeout(()=>{e(null)},a)},g=async(e,a,t,s,n=null)=>{a(!0),t(null);try{const o=await e();return s(o),o}catch(o){throw i(o,t),n&&n(o),o}finally{a(!1)}},d=(e,a)=>{let t;return(...s)=>(clearTimeout(t),new Promise(n=>{t=setTimeout(async()=>{const o=await e(...s);n(o)},a)}))},u=(e,a,t=5)=>{const s={data:a,timestamp:Date.now(),ttl:t*60*1e3};try{sessionStorage.setItem(`api_cache_${e}`,JSON.stringify(s))}catch(n){console.warn("Failed to cache API response:",n)}},S=e=>{try{const a=sessionStorage.getItem(`api_cache_${e}`);if(!a)return null;const{data:t,timestamp:s,ttl:n}=JSON.parse(a);return Date.now()-s>n?(sessionStorage.removeItem(`api_cache_${e}`),null):t}catch(a){return console.warn("Failed to get cached API response:",a),null}},p=(e=null)=>{Object.keys(sessionStorage).forEach(t=>{t.startsWith("api_cache_")&&(!e||t.includes(e))&&sessionStorage.removeItem(t)})};export{h as API_BASE_URL,y as API_TIMEOUT,A as KNOWLEDGE_TYPES,w as RESPONSE_TYPES,f as TRAINING_MODES,D as apiClient,C as buildQueryString,b as bulkCreateKnowledge,v as bulkImportFromJSON,u as cacheApiResponse,p as clearApiCache,c as clearErrorAfterDelay,K as confirmKnowledgeWrite,_ as createClient,E as createFeedback,T as createInteraction,R as createKnowledge,O as createSession,d as debounce,P as deleteAllKnowledge,k as deleteClient,j as deleteInteraction,B as deleteKnowledge,F as deleteSession,N as endSession,g as executeApiCall,M as feedbackApi,L as formatClientData,W as formatDojoResponse,J as formatFeedbackData,Q as formatInteractionData,$ as formatKnowledgeData,x as formatSearchResults,z as formatSessionData,G as generateSessionId,H as getAvailableArchetypes,U as getAvailableInteractionTypes,Y as getAvailableKnowledgeArchetypes,q as getAvailableKnowledgeTypes,V as getAvailableOutcomes,X as getAvailableSessionTypes,S as getCachedApiResponse,Z as getClientById,ee as getClientEngagement,ae as getClientSessions,te as getClientStatistics,se as getClients,ne as getClientsByArchetype,oe as getConversationAnalysis,ie as getDojoAnalytics,le as getDojoHealth,re as getFeedbackStats,ce as getInteractionById,ge as getInteractionStatistics,de as getKnowledgeById,ue as getKnowledgeList,Se as getKnowledgeStats,pe as getLocalKnowledgeTypes,me as getQdrantHealth,Ie as getRecentInteractions,he as getRecentSessions,ye as getSessionById,Ae as getSessionInteractions,we as getSessionStatistics,fe as getSessionSummary,i as handleApiError,r as initialItemState,l as initialListState,De as isSuggestionRated,Ce as searchClients,be as searchKnowledge,ve as sendClarifyingAnswer,Ke as sendDojoMessage,_e as sendSessionQuestionAnswer,Ee as updateClient,Te as updateInteraction,Re as updateSession,Oe as validateClientData,Pe as validateDojoMessage,ke as validateInteractionData,je as validateKnowledgeData,Be as validateSearchData,Fe as validateSessionData,Ne as validateStructuredData};
