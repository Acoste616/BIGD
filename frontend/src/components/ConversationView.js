/**
 * ConversationView - Główny interfejs konwersacyjny aplikacji
 * 
 * Layout podzielony na dwie części:
 * - Lewa strona (70%): Strumień konwersacji z formularzem i historią
 * - Prawa strona (30%): Panel strategiczny z archetypami i wiedzą
 */
import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Paper,
  useTheme,
  useMediaQuery,
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Alert,
  Chip,
  Stack,
  CircularProgress
} from '@mui/material';
import {
  CheckCircle as CompleteIcon,
  Save as SaveIcon,
  Cancel as CancelIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import MainLayout from './MainLayout';
import ConversationStream from './conversation/ConversationStream';
import StrategicPanel from './conversation/StrategicPanel';
import { createClient, updateClient } from '../services/clientsApi';
import { sendDojoMessage } from '../services/dojoApi';
import { createSession } from '../services/sessionsApi';

const ConversationView = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('lg'));
  const navigate = useNavigate();
  
  // Stan bieżącej sesji - nowa logika z clientId i sessionId
  const [currentClientId, setCurrentClientId] = useState(null);
  const [currentSessionId, setCurrentSessionId] = useState(null);
  const [currentSession, setCurrentSession] = useState(null);
  const [interactions, setInteractions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  
  // Stan panelu strategicznego
  const [archetypes, setArchetypes] = useState([]);
  const [strategicInsights, setStrategicInsights] = useState([]);
  
  // Nowy workflow state
  const [autoGeneratedClient, setAutoGeneratedClient] = useState(null);
  const [analysisCompleted, setAnalysisCompleted] = useState(false);
  const [showCompleteDialog, setShowCompleteDialog] = useState(false);
  const [completionLoading, setCompletionLoading] = useState(false);
  const [initializationLoading, setInitializationLoading] = useState(true);
  
  // Auto-generacja klienta i sesji na start
  useEffect(() => {
    const initializeAnalysis = async () => {
      try {
        console.log('🚀 ConversationView: Auto-generuję nowego klienta dla analizy');
        
        // Krok 1: Stwórz klienta z minimalnym profilem
        const newClient = await createClient({
          notes: 'Automatycznie wygenerowany profil - analiza w toku',
          archetype: null,  // AI uzupełni
          tags: ['analiza-w-toku']  // Tymczasowy tag
        });
        
        console.log('✅ ConversationView: Klient wygenerowany:', newClient.alias);
        
        // Krok 2: Stwórz sesję dla tego klienta
        const newSession = await createSession(newClient.id, {
          session_type: 'consultation',
          summary: 'Sesja analizy automatycznej',
          notes: 'Sesja utworzona automatycznie dla analizy AI'
        });
        
        console.log('✅ ConversationView: Sesja utworzona:', newSession.id);
        
        // Aktualizuj stan
        setAutoGeneratedClient(newClient);
        setCurrentClientId(newClient.id);
        setCurrentSessionId(newSession.id);
        setCurrentSession(newSession);
        
      } catch (error) {
        console.error('❌ ConversationView: Błąd podczas inicjalizacji:', error);
      } finally {
        setInitializationLoading(false);
      }
    };
    
    // Tylko przy pierwszym załadowaniu
    if (!currentClientId && !autoGeneratedClient) {
      initializeAnalysis();
    }
  }, [currentClientId, autoGeneratedClient]);

  // === HANDLERS ===
  
  const handleCompleteAnalysis = () => {
    if (interactions.length > 0) {
      setShowCompleteDialog(true);
    }
  };

  const handleSaveAndComplete = async () => {
    if (!autoGeneratedClient || !currentSession) return;
    
    setCompletionLoading(true);
    
    try {
      // AI analizuje całą konwersację i uzupełnia profil klienta
      const clientProfile = await analyzeAndCreateProfile();
      
      // Zapisz uzupełniony profil klienta
      const updatedClient = await updateClientProfile(clientProfile);
      
      console.log('✅ ConversationView: Analiza zakończona, profil zapisany:', updatedClient.alias);
      
      // Przekieruj do profilu klienta
      navigate(`/clients/${updatedClient.id}`);
      
    } catch (error) {
      console.error('❌ ConversationView: Błąd podczas finalizacji:', error);
    } finally {
      setCompletionLoading(false);
      setShowCompleteDialog(false);
    }
  };

  const analyzeAndCreateProfile = async () => {
    try {
      // Przygotuj pełną konwersację dla AI
      const conversationText = interactions
        .map(interaction => `Sprzedawca: "${interaction.user_input}"\nAI Analiza: ${interaction.ai_response_json?.main_analysis || 'brak analizy'}`)
        .join('\n\n');
      
      console.log('🤖 ConversationView: Wysyłam konwersację do AI dla analizy profilu');
      
      // Wywołaj AI Dojo do analizy profilu klienta
      const aiRequest = {
        message: `ANALIZA PROFILU KLIENTA:
        
Przeanalizuj poniższą konwersację sprzedażową i stwórz kompletny profil klienta.

KONWERSACJA:
${conversationText}

ZADANIE:
Na podstawie powyższej konwersacji określ:
1. Archetyp klienta (np. Pragmatyczny Analityk, Entuzjasta Osiągów, Strażnik Rodziny, etc.)
2. Tagi profilujące (3-5 słów kluczowych opisujących zainteresowania i styl)
3. Notatki analityczne (2-3 zdania z kluczowymi insights o kliencie)

Przygotuj dane w formacie JSON gotowym do zapisu.`,
        training_mode: 'general_chat',
        conversation_history: []
      };
      
      const aiResponse = await sendDojoMessage(aiRequest);
      
      // Jeśli AI przygotował structured_data, użyj tego
      if (aiResponse.structured_data) {
        return {
          archetype: aiResponse.structured_data.archetype || 'Nieprzypisany',
          tags: aiResponse.structured_data.tags || ['ai-analyzed'],
          notes: aiResponse.structured_data.content || `Profil wygenerowany na podstawie ${interactions.length} interakcji`
        };
      }
      
      // Fallback - parsuj odpowiedź tekstową AI
      return {
        archetype: 'AI-Analyzed',
        tags: ['ai-generated', 'analyzed', 'auto-profile'],
        notes: `AI Profile: ${aiResponse.response.substring(0, 300)}...`
      };
      
    } catch (error) {
      console.error('❌ ConversationView: Błąd analizy AI:', error);
      
      // Fallback profil
      return {
        archetype: 'Auto-Generated',
        tags: ['basic-analysis', 'auto-profile'],
        notes: `Profil utworzony automatycznie na podstawie ${interactions.length} interakcji. AI analiza niedostępna.`
      };
    }
  };

  const updateClientProfile = async (profile) => {
    try {
      console.log('💾 ConversationView: Aktualizuję profil klienta:', profile);
      
      // Usuń tag tymczasowy i dodaj finalne
      const finalTags = ['analizowany', 'ai-profil', ...profile.tags];
      
      const updatedClient = await updateClient(autoGeneratedClient.id, {
        archetype: profile.archetype,
        tags: finalTags,
        notes: profile.notes
      });
      
      console.log('✅ ConversationView: Profil klienta zaktualizowany');
      
      return updatedClient;
      
    } catch (error) {
      console.error('❌ ConversationView: Błąd podczas aktualizacji profilu:', error);
      throw error;
    }
  };

  // Loading state podczas inicjalizacji
  if (initializationLoading) {
    return (
      <MainLayout title="AI Sales Co-Pilot - Przygotowywanie analizy">
        <Box 
          sx={{ 
            height: 'calc(100vh - 140px)', 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: 'center', 
            justifyContent: 'center',
            gap: 3
          }}
        >
          <CircularProgress size={60} />
          <Stack spacing={1} alignItems="center">
            <Typography variant="h6" color="primary">
              Przygotowuję nową analizę...
            </Typography>
            <Typography variant="body2" color="text.secondary">
              System automatycznie tworzy profil klienta i sesję analizy
            </Typography>
            <Stack direction="row" spacing={1} mt={1}>
              <Chip size="small" label="Auto-generacja klienta" color="primary" variant="outlined" />
              <Chip size="small" label="Tworzenie sesji" color="secondary" variant="outlined" />
              <Chip size="small" label="Inicjalizacja AI" color="info" variant="outlined" />
            </Stack>
          </Stack>
        </Box>
      </MainLayout>
    );
  }

  return (
    <MainLayout title={`AI Sales Co-Pilot - ${autoGeneratedClient?.alias || 'Live Session'}`}>
      <Box sx={{ height: 'calc(100vh - 140px)', overflow: 'hidden' }}>
        {/* Header z informacją o auto-generowanym kliencie */}
        {autoGeneratedClient && (
          <Alert severity="info" sx={{ mb: 2 }}>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Typography variant="body2">
                <strong>🤖 Analiza AI:</strong> {autoGeneratedClient.alias} • Sesja #{currentSessionId}
              </Typography>
              <Chip 
                label="AI-Driven Analysis" 
                size="small" 
                color="primary" 
                variant="outlined"
              />
            </Box>
          </Alert>
        )}

        <Grid container spacing={2} sx={{ height: '100%' }}>
          {/* Lewa strona: Strumień konwersacji (70%) */}
          <Grid 
            item 
            xs={12} 
            lg={8.5} 
            sx={{ 
              height: '100%',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            <Paper 
              elevation={1}
              sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                borderRadius: 2,
                overflow: 'hidden',
                border: '1px solid',
                borderColor: 'divider'
              }}
            >
              <ConversationStream
                currentClientId={currentClientId}
                currentSessionId={currentSessionId}
                currentSession={currentSession}
                interactions={interactions}
                isLoading={isLoading}
                onNewInteraction={(interaction) => {
                  setInteractions(prev => [...prev, interaction]);
                }}
                onSessionUpdate={setCurrentSession}
                onClientIdUpdate={setCurrentClientId}
                onSessionIdUpdate={setCurrentSessionId}
                onArchetypesUpdate={setArchetypes}
                onInsightsUpdate={setStrategicInsights}
              />
            </Paper>
          </Grid>

          {/* Prawa strona: Panel strategiczny (30%) */}
          <Grid 
            item 
            xs={12} 
            lg={3.5} 
            sx={{ 
              height: '100%',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            <Paper 
              elevation={1}
              sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                borderRadius: 2,
                overflow: 'hidden',
                border: '1px solid',
                borderColor: 'divider',
                bgcolor: 'background.paper'
              }}
            >
              <StrategicPanel
                archetypes={archetypes}
                insights={strategicInsights}
                currentSession={currentSession}
                isLoading={isLoading}
              />
            </Paper>
          </Grid>
        </Grid>

        {/* Mobile: Stack vertically */}
        {isMobile && (
          <Box sx={{ 
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            zIndex: 1000,
            bgcolor: 'background.paper',
            borderTop: '1px solid',
            borderColor: 'divider',
            p: 2
          }}>
            {/* Mobile strategic panel collapsed */}
          </Box>
        )}

        {/* Floating Action Button: Zakończ Analizę */}
        {interactions.length > 0 && autoGeneratedClient && (
          <Fab
            color="primary"
            variant="extended"
            onClick={handleCompleteAnalysis}
            sx={{
              position: 'fixed',
              bottom: 24,
              right: 24,
              zIndex: 1000
            }}
          >
            <CompleteIcon sx={{ mr: 1 }} />
            Zakończ Analizę
          </Fab>
        )}

        {/* Dialog potwierdzenia zakończenia */}
        <Dialog
          open={showCompleteDialog}
          onClose={() => setShowCompleteDialog(false)}
          maxWidth="md"
          fullWidth
        >
          <DialogTitle>
            <Box display="flex" alignItems="center" gap={1}>
              <CompleteIcon color="primary" />
              Zakończenie Analizy Klienta
            </Box>
          </DialogTitle>
          
          <DialogContent>
            {autoGeneratedClient && (
              <Box>
                <Alert severity="info" sx={{ mb: 2 }}>
                  Analiza dla <strong>{autoGeneratedClient.alias}</strong> zostanie zakończona.
                  AI automatycznie uzupełni profil klienta na podstawie przeprowadzonej konwersacji.
                </Alert>
                
                <Typography variant="body1" gutterBottom>
                  📊 <strong>Podsumowanie analizy:</strong>
                </Typography>
                <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
                  <Chip label={`${interactions.length} interakcji`} color="primary" variant="outlined" />
                  {currentSession && (
                    <Chip 
                      label={`Sentiment: ${currentSession.sentiment_score || 'N/A'}/10`} 
                      color="info" 
                      variant="outlined" 
                    />
                  )}
                  {currentSession && (
                    <Chip 
                      label={`Potencjał: ${currentSession.potential_score || 'N/A'}/10`} 
                      color="success" 
                      variant="outlined" 
                    />
                  )}
                </Stack>
                
                <Typography variant="body2" color="text.secondary">
                  Po zakończeniu AI przeanalizuje całą konwersację i automatycznie uzupełni:
                </Typography>
                <Box component="ul" sx={{ mt: 1, pl: 2 }}>
                  <li><Typography variant="body2">Archetyp klienta na podstawie zachowań</Typography></li>
                  <li><Typography variant="body2">Tagi profilujące na podstawie zainteresowań</Typography></li>
                  <li><Typography variant="body2">Notatki analityczne z kluczowymi insights</Typography></li>
                </Box>
              </Box>
            )}
          </DialogContent>

          <DialogActions>
            <Button 
              onClick={() => setShowCompleteDialog(false)}
              disabled={completionLoading}
            >
              Anuluj
            </Button>
            <Button
              onClick={handleSaveAndComplete}
              variant="contained"
              disabled={completionLoading}
              startIcon={completionLoading ? <CircularProgress size={16} /> : <SaveIcon />}
            >
              {completionLoading ? 'Zapisuję profil...' : 'Zakończ i zapisz profil'}
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </MainLayout>
  );
};

export default ConversationView;
