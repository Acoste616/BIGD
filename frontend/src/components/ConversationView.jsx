/**
 * ConversationView - G≈Ç√≥wny interfejs konwersacyjny aplikacji
 * 
 * Layout podzielony na dwie czƒô≈õci:
 * - Lewa strona (70%): Strumie≈Ñ konwersacji z formularzem i historiƒÖ
 * - Prawa strona (30%): Panel strategiczny z archetypami i wiedzƒÖ
 */
import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Paper,
  useTheme,
  useMediaQuery,
  Fab,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Alert,
  Chip,
  Stack,
  CircularProgress
} from '@mui/material';
import {
  CheckCircle as CompleteIcon,
  Save as SaveIcon,
  Cancel as CancelIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
// Usuwam import MainLayout - komponent jest ju≈º wewnƒÖtrz MainLayout w routingu
import ConversationStream from './conversation/ConversationStream';
import StrategicPanel from './conversation/StrategicPanel';
import { createClient, updateClient } from '../services/clientsApi';
import { sendDojoMessage } from '../services/dojoApi';
import { createSession } from '../services/sessionsApi';
import { createInteraction } from '../services/interactionsApi';
// üß†‚ö° DODAJƒò ULTRA M√ìZG dla pe≈Çnej analizy psychometrycznej
import { useUltraBrain } from '../hooks/useUltraBrain';

const ConversationView = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('lg'));
  const navigate = useNavigate();
  
  // Stan bie≈ºƒÖcej sesji - nowa logika z clientId i sessionId
  const [currentClientId, setCurrentClientId] = useState(null);
  const [currentSessionId, setCurrentSessionId] = useState(null);
  const [currentSession, setCurrentSession] = useState(null);
  const [interactions, setInteractions] = useState([]);
  const [currentInteractionId, setCurrentInteractionId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Stan panelu strategicznego
  const [archetypes, setArchetypes] = useState([]);
  const [strategicInsights, setStrategicInsights] = useState([]);
  
  // Nowy workflow state
  const [autoGeneratedClient, setAutoGeneratedClient] = useState(null);
  const [analysisCompleted, setAnalysisCompleted] = useState(false);
  const [showCompleteDialog, setShowCompleteDialog] = useState(false);
  const [completionLoading, setCompletionLoading] = useState(false);
  const [initializationLoading, setInitializationLoading] = useState(true);
  
  // üß†‚ö° ULTRA M√ìZG - CENTRALNE ≈πR√ìD≈ÅO PRAWDY dla analizy psychometrycznej
  const {
    dnaKlienta,
    strategia,
    surowePsychology,
    isDnaReady,
    isStrategiaReady,
    isUltraBrainReady,
    confidence: ultraBrainConfidence,
    legacy: ultraBrainLegacy,
    loading: ultraBrainLoading,
    error: ultraBrainError,
    isPolling: ultraBrainPolling,
    getArchetypeName,
    getMainDrive,
    getCommunicationStyle,
    getKeyLevers,
    getRedFlags,
    getStrategicRecommendation,
    getQuickResponse,
    getSuggestedQuestions,
    getProactiveGuidance
  } = useUltraBrain(currentInteractionId, {
    autoFetch: !!currentInteractionId,
    enablePolling: true,
    debug: true
  });

  // üß†‚ö° ULTRA M√ìZG - Aktualizuj archetypes i insights z Ultra M√≥zgu
  useEffect(() => {
    if (isDnaReady && dnaKlienta) {
      // Aktualizuj archetypes z DNA klienta
      const newArchetypes = [{
        name: getArchetypeName(),
        confidence: ultraBrainConfidence,
        description: dnaKlienta.archetype_description || 'Profil w trakcie analizy...',
        traits: dnaKlienta.dominant_traits || [],
        motivators: dnaKlienta.motivators || []
      }];
      setArchetypes(newArchetypes);
      
      // Aktualizuj strategic insights
      const newInsights = [{
        type: 'psychometric',
        title: 'Profil Psychometryczny',
        content: `Archetyp: ${getArchetypeName()}`,
        confidence: ultraBrainConfidence,
        data: {
          mainDrive: getMainDrive(),
          communicationStyle: getCommunicationStyle(),
          keyLevers: getKeyLevers(),
          redFlags: getRedFlags()
        }
      }];
      
      if (isStrategiaReady && strategia) {
        newInsights.push({
          type: 'strategy',
          title: 'Strategia Sprzeda≈ºowa',
          content: getStrategicRecommendation(),
          confidence: ultraBrainConfidence,
          data: strategia
        });
      }
      
      setStrategicInsights(newInsights);
    }
  }, [isDnaReady, isStrategiaReady, dnaKlienta, strategia, ultraBrainConfidence, 
      getArchetypeName, getMainDrive, getCommunicationStyle, getKeyLevers, 
      getRedFlags, getStrategicRecommendation]);
  
  // üîß DEBUG: Log data passing to StrategicPanel
  React.useEffect(() => {
    if (isDnaReady || isStrategiaReady || ultraBrainConfidence > 0) {
      console.log('üîß [CONVERSATION VIEW] Passing data to StrategicPanel:', {
        dnaKlienta: dnaKlienta ? {
          holistic_summary: dnaKlienta.holistic_summary,
          main_drive: dnaKlienta.main_drive,
          hasRealData: !!(dnaKlienta.holistic_summary && dnaKlienta.holistic_summary !== 'Profil w trakcie analizy...')
        } : 'Not available',
        getArchetypeName: getArchetypeName ? getArchetypeName() : 'Function not available',
        isDnaReady,
        isStrategiaReady,
        ultraBrainConfidence,
        functionsAvailable: {
          getArchetypeName: !!getArchetypeName,
          getMainDrive: !!getMainDrive,
          getCommunicationStyle: !!getCommunicationStyle
        }
      });
    }
  }, [isDnaReady, isStrategiaReady, dnaKlienta, ultraBrainConfidence, getArchetypeName, getMainDrive, getCommunicationStyle]);

  // Auto-generacja klienta i sesji na start
  useEffect(() => {
    const initializeAnalysis = async () => {
      try {
        console.log('üöÄ ConversationView: Auto-generujƒô nowego klienta dla analizy');
        
        // Krok 1: Stw√≥rz klienta z minimalnym profilem
        const newClient = await createClient({
          notes: 'Automatycznie wygenerowany profil - analiza w toku',
          archetype: null,  // AI uzupe≈Çni
          tags: ['analiza-w-toku']  // Tymczasowy tag
        });
        
        console.log('‚úÖ ConversationView: Klient wygenerowany:', newClient.alias);
        
        // Krok 2: Stw√≥rz sesjƒô dla tego klienta
        const newSession = await createSession(newClient.id, {
          session_type: 'consultation',
          summary: 'Sesja analizy automatycznej',
          notes: 'Sesja utworzona automatycznie dla analizy AI'
        });
        
        console.log('‚úÖ ConversationView: Sesja utworzona:', newSession.id);
        
        // Aktualizuj stan
        setAutoGeneratedClient(newClient);
        setCurrentClientId(newClient.id);
        setCurrentSessionId(newSession.id);
        setCurrentSession(newSession);
        
      } catch (error) {
        console.error('‚ùå ConversationView: B≈ÇƒÖd podczas inicjalizacji:', error);
      } finally {
        setInitializationLoading(false);
      }
    };
    
    // Tylko przy pierwszym za≈Çadowaniu
    if (!currentClientId && !autoGeneratedClient) {
      initializeAnalysis();
    }
  }, [currentClientId, autoGeneratedClient]);

  // === HANDLERS ===
  
  const handleCompleteAnalysis = () => {
    if (interactions.length > 0) {
      setShowCompleteDialog(true);
    }
  };

  const handleSaveAndComplete = async () => {
    if (!autoGeneratedClient || !currentSession) return;
    
    setCompletionLoading(true);
    
    try {
      // AI analizuje ca≈ÇƒÖ konwersacjƒô i uzupe≈Çnia profil klienta
      const clientProfile = await analyzeAndCreateProfile();
      
      // Zapisz uzupe≈Çniony profil klienta
      const updatedClient = await updateClientProfile(clientProfile);
      
      console.log('‚úÖ ConversationView: Analiza zako≈Ñczona, profil zapisany:', updatedClient.alias);
      
      // Przekieruj do profilu klienta
      navigate(`/clients/${updatedClient.id}`);
      
    } catch (error) {
      console.error('‚ùå ConversationView: B≈ÇƒÖd podczas finalizacji:', error);
    } finally {
      setCompletionLoading(false);
      setShowCompleteDialog(false);
    }
  };

  const analyzeAndCreateProfile = async () => {
    try {
      // Przygotuj pe≈ÇnƒÖ konwersacjƒô dla AI
      const conversationText = interactions
        .map(interaction => `Sprzedawca: "${interaction.user_input}"\nAI Analiza: ${interaction.ai_response_json?.main_analysis || 'brak analizy'}`)
        .join('\n\n');
      
      console.log('ü§ñ ConversationView: Wysy≈Çam konwersacjƒô do AI dla analizy profilu');
      
      // Wywo≈Çaj AI Dojo do analizy profilu klienta
      const aiRequest = {
        message: `ANALIZA PROFILU KLIENTA:
        
Przeanalizuj poni≈ºszƒÖ konwersacjƒô sprzeda≈ºowƒÖ i stw√≥rz kompletny profil klienta.

KONWERSACJA:
${conversationText}

ZADANIE:
Na podstawie powy≈ºszej konwersacji okre≈õl:
1. Archetyp klienta (np. Pragmatyczny Analityk, Entuzjasta OsiƒÖg√≥w, Stra≈ºnik Rodziny, etc.)
2. Tagi profilujƒÖce (3-5 s≈Ç√≥w kluczowych opisujƒÖcych zainteresowania i styl)
3. Notatki analityczne (2-3 zdania z kluczowymi insights o kliencie)

Przygotuj dane w formacie JSON gotowym do zapisu.`,
        training_mode: 'general_chat',
        conversation_history: []
      };
      
      const aiResponse = await sendDojoMessage(aiRequest);
      
      // Je≈õli AI przygotowa≈Ç structured_data, u≈ºyj tego
      if (aiResponse.structured_data) {
        return {
          archetype: aiResponse.structured_data.archetype || 'Nieprzypisany',
          tags: aiResponse.structured_data.tags || ['ai-analyzed'],
          notes: aiResponse.structured_data.content || `Profil wygenerowany na podstawie ${interactions.length} interakcji`
        };
      }
      
      // Fallback - parsuj odpowied≈∫ tekstowƒÖ AI
      return {
        archetype: 'AI-Analyzed',
        tags: ['ai-generated', 'analyzed', 'auto-profile'],
        notes: `AI Profile: ${aiResponse.response.substring(0, 300)}...`
      };
      
    } catch (error) {
      console.error('‚ùå ConversationView: B≈ÇƒÖd analizy AI:', error);
      
      // Fallback profil
      return {
        archetype: 'Auto-Generated',
        tags: ['basic-analysis', 'auto-profile'],
        notes: `Profil utworzony automatycznie na podstawie ${interactions.length} interakcji. AI analiza niedostƒôpna.`
      };
    }
  };

  const updateClientProfile = async (profile) => {
    try {
      console.log('üíæ ConversationView: Aktualizujƒô profil klienta:', profile);
      
      // Usu≈Ñ tag tymczasowy i dodaj finalne
      const finalTags = ['analizowany', 'ai-profil', ...profile.tags];
      
      const updatedClient = await updateClient(autoGeneratedClient.id, {
        archetype: profile.archetype,
        tags: finalTags,
        notes: profile.notes
      });
      
      console.log('‚úÖ ConversationView: Profil klienta zaktualizowany');
      
      return updatedClient;
      
    } catch (error) {
      console.error('‚ùå ConversationView: B≈ÇƒÖd podczas aktualizacji profilu:', error);
      throw error;
    }
  };

  // Loading state podczas inicjalizacji
  if (initializationLoading) {
    return (
      <Box sx={{ p: 3 }}>
        <Box 
          sx={{ 
            height: 'calc(100vh - 140px)', 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: 'center', 
            justifyContent: 'center',
            gap: 3
          }}
        >
          <CircularProgress size={60} />
          <Stack spacing={1} alignItems="center">
            <Typography variant="h6" color="primary">
              Przygotowujƒô nowƒÖ analizƒô...
            </Typography>
            <Typography variant="body2" color="text.secondary">
              System automatycznie tworzy profil klienta i sesjƒô analizy
            </Typography>
            <Stack direction="row" spacing={1} mt={1}>
              <Chip size="small" label="Auto-generacja klienta" color="primary" variant="outlined" />
              <Chip size="small" label="Tworzenie sesji" color="secondary" variant="outlined" />
              <Chip size="small" label="Inicjalizacja AI" color="info" variant="outlined" />
            </Stack>
          </Stack>
        </Box>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ height: 'calc(100vh - 140px)', overflow: 'hidden' }}>
        {/* Header z informacjƒÖ o auto-generowanym kliencie */}
        {autoGeneratedClient && (
          <Alert severity="info" sx={{ mb: 2 }}>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Typography variant="body2">
                <strong>ü§ñ Analiza AI:</strong> {autoGeneratedClient.alias} ‚Ä¢ Sesja #{currentSessionId}
              </Typography>
              <Chip 
                label="AI-Driven Analysis" 
                size="small" 
                color="primary" 
                variant="outlined"
              />
            </Box>
          </Alert>
        )}

        <Grid container spacing={2} sx={{ height: '100%' }}>
          {/* Lewa strona: Strumie≈Ñ konwersacji (70%) */}
          <Grid 
            item 
            xs={12} 
            lg={8.5} 
            sx={{ 
              height: '100%',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            <Paper 
              elevation={1}
              sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                borderRadius: 2,
                overflow: 'hidden',
                border: '1px solid',
                borderColor: 'divider'
              }}
            >
                             <ConversationStream
                 currentClientId={currentClientId}
                 currentSessionId={currentSessionId}
                 currentSession={currentSession}
                 interactions={interactions}
                 isLoading={isLoading}
                 isSendingMessage={isLoading}
                 conversationError={null}
                                 onNewInteraction={(interaction) => {
                  console.log('ConversationView - nowa interakcja:', interaction);
                  console.log('ConversationView - ustawiam currentInteractionId na:', interaction.id);
                  setInteractions(prev => [...prev, interaction]);
                  setCurrentInteractionId(interaction.id); // ≈öledzenie ID dla analizy psychometrycznej
                }}
                onSendMessage={async (messageText) => {
                  console.log('üöÄ ConversationView - Wysy≈Çam wiadomo≈õƒá:', messageText);
                  
                  try {
                    // Sprawd≈∫ czy mamy sesjƒô
                    if (!currentSessionId) {
                      console.error('‚ùå ConversationView - Brak ID sesji');
                      return;
                    }

                    // Sprawd≈∫ czy mamy klienta
                    if (!currentClientId) {
                      console.error('‚ùå ConversationView - Brak ID klienta');
                      return;
                    }

                    // Ustaw loading state
                    setIsLoading(true);

                    // Wywo≈Çaj API do utworzenia interakcji
                    const newInteraction = await createInteraction(currentSessionId, {
                      user_input: messageText,
                      interaction_type: 'question',
                      client_id: currentClientId,
                      session_id: currentSessionId
                    });

                    console.log('‚úÖ ConversationView - Interakcja utworzona:', newInteraction);

                    // Dodaj nowƒÖ interakcjƒô do stanu
                    setInteractions(prev => [...prev, newInteraction]);
                    
                    // Ustaw jako aktualnƒÖ interakcjƒô
                    setCurrentInteractionId(newInteraction.id);

                    // Aktualizuj sesjƒô
                    setCurrentSession(prev => ({
                      ...prev,
                      last_interaction: newInteraction
                    }));

                  } catch (error) {
                    console.error('‚ùå ConversationView - B≈ÇƒÖd podczas tworzenia interakcji:', error);
                    // Mo≈ºesz tu dodaƒá obs≈Çugƒô b≈Çƒôd√≥w UI
                  } finally {
                    setIsLoading(false);
                  }
                }}
                onSessionUpdate={setCurrentSession}
                onClientIdUpdate={setCurrentClientId}
                onSessionIdUpdate={setCurrentSessionId}
                onArchetypesUpdate={setArchetypes}
                onInsightsUpdate={setStrategicInsights}
              />
            </Paper>
          </Grid>

          {/* Prawa strona: Panel strategiczny (30%) */}
          <Grid 
            item 
            xs={12} 
            lg={3.5} 
            sx={{ 
              height: '100%',
              display: 'flex',
              flexDirection: 'column'
            }}
          >
            <Paper 
              elevation={1}
              sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                borderRadius: 2,
                overflow: 'hidden',
                border: '1px solid',
                borderColor: 'divider',
                bgcolor: 'background.paper'
              }}
            >
              <StrategicPanel
                // üîß DEBUG: Enhanced debugging for data passing
                // Note: Removed ref prop as functional components don't support refs
                // Debug data will be logged via useEffect in StrategicPanel
                // üß†‚ö° ULTRA M√ìZG - Pe≈Çne dane psychometryczne
                data={{
                  quick_response_for_client: getQuickResponse(),
                  strategic_tip_for_seller: getStrategicRecommendation(),
                  knowledge_summary: dnaKlienta?.archetype_description || 'Profil w trakcie analizy...',
                  certainty_level: ultraBrainConfidence
                }}
                
                // LEGACY PROPS dla backward compatibility
                archetypes={archetypes}
                insights={strategicInsights}
                currentSession={currentSession}
                currentInteractionId={currentInteractionId}
                isLoading={isLoading || ultraBrainLoading}
                
                // üß†‚ö° ULTRA M√ìZG - Dodatkowe dane dla pe≈Çnej analizy
                ultraBrainData={{
                  dnaKlienta,
                  strategia,
                  surowePsychology,
                  isDnaReady,
                  isStrategiaReady,
                  isUltraBrainReady,
                  confidence: ultraBrainConfidence,
                  legacy: ultraBrainLegacy,
                  loading: ultraBrainLoading,
                  error: ultraBrainError,
                  isPolling: ultraBrainPolling
                }}
                
                // üß†‚ö° ULTRA M√ìZG - Funkcje pomocnicze
                ultraBrainFunctions={{
                  getArchetypeName,
                  getMainDrive,
                  getCommunicationStyle,
                  getKeyLevers,
                  getRedFlags,
                  getStrategicRecommendation,
                  getQuickResponse,
                  getSuggestedQuestions,
                  getProactiveGuidance
                }}
              />
            </Paper>
          </Grid>
        </Grid>

        {/* Mobile: Stack vertically */}
        {isMobile && (
          <Box sx={{ 
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            zIndex: 1000,
            bgcolor: 'background.paper',
            borderTop: '1px solid',
            borderColor: 'divider',
            p: 2
          }}>
            {/* Mobile strategic panel collapsed */}
          </Box>
        )}

        {/* Floating Action Button: Zako≈Ñcz Analizƒô */}
        {interactions.length > 0 && autoGeneratedClient && (
          <Fab
            color="primary"
            variant="extended"
            onClick={handleCompleteAnalysis}
            sx={{
              position: 'fixed',
              bottom: 24,
              right: 24,
              zIndex: 1000
            }}
          >
            <CompleteIcon sx={{ mr: 1 }} />
            Zako≈Ñcz Analizƒô
          </Fab>
        )}

        {/* Dialog potwierdzenia zako≈Ñczenia */}
        <Dialog
          open={showCompleteDialog}
          onClose={() => setShowCompleteDialog(false)}
          maxWidth="md"
          fullWidth
        >
          <DialogTitle>
            <Box display="flex" alignItems="center" gap={1}>
              <CompleteIcon color="primary" />
              Zako≈Ñczenie Analizy Klienta
            </Box>
          </DialogTitle>
          
          <DialogContent>
            {autoGeneratedClient && (
              <Box>
                <Alert severity="info" sx={{ mb: 2 }}>
                  Analiza dla <strong>{autoGeneratedClient.alias}</strong> zostanie zako≈Ñczona.
                  AI automatycznie uzupe≈Çni profil klienta na podstawie przeprowadzonej konwersacji.
                </Alert>
                
                <Typography variant="body1" gutterBottom>
                  üìä <strong>Podsumowanie analizy:</strong>
                </Typography>
                <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
                  <Chip label={`${interactions.length} interakcji`} color="primary" variant="outlined" />
                  {/* MODU≈Å 4: Dummy sentiment/potencja≈Ç elementy zastƒÖpione zaawansowanymi wska≈∫nikami w Strategic Panel */}
                </Stack>
                
                <Typography variant="body2" color="text.secondary">
                  Po zako≈Ñczeniu AI przeanalizuje ca≈ÇƒÖ konwersacjƒô i automatycznie uzupe≈Çni:
                </Typography>
                <Box component="ul" sx={{ mt: 1, pl: 2 }}>
                  <li><Typography variant="body2">Archetyp klienta na podstawie zachowa≈Ñ</Typography></li>
                  <li><Typography variant="body2">Tagi profilujƒÖce na podstawie zainteresowa≈Ñ</Typography></li>
                  <li><Typography variant="body2">Notatki analityczne z kluczowymi insights</Typography></li>
                </Box>
              </Box>
            )}
          </DialogContent>

          <DialogActions>
            <Button 
              onClick={() => setShowCompleteDialog(false)}
              disabled={completionLoading}
            >
              Anuluj
            </Button>
            <Button
              onClick={handleSaveAndComplete}
              variant="contained"
              disabled={completionLoading}
              startIcon={completionLoading ? <CircularProgress size={16} /> : <SaveIcon />}
            >
              {completionLoading ? 'Zapisujƒô profil...' : 'Zako≈Ñcz i zapisz profil'}
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
};

export default ConversationView;
